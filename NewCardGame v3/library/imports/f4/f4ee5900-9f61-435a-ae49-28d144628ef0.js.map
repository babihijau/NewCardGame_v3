{"version":3,"sources":["..\\..\\..\\..\\assets\\Script/assets\\Script\\DragCardScript.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"..\\..\\..\\..\\assets\\Script","sourcesContent":["import Discarded from \"./DiscardedCardScript\";\r\nimport Hand from \"./HandCardScript\";\r\nimport Deck from \"./DeckCardScript\";\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class DragCard extends cc.Component {\r\n\r\n    _cardInDeck: boolean = false;\r\n    _cardInHand: boolean = false;\r\n    _cardInDiscard: boolean = false;\r\n    parent: cc.Node = null;\r\n    propagate: boolean = false;\r\n    _down: boolean = false;\r\n    deckLayout: cc.Node = null;\r\n    handLayout: cc.Node = null;\r\n    discardLayout: cc.Node = null;\r\n    previousCardIn: string = null;\r\n\r\n    // this will count the movement of the card in hand area\r\n    public static countLeft: number = 0;\r\n    public static countRight: number = 0;\r\n\r\n    // literally a retarded walk-around bcos i write bad codes :(\r\n    // will figure this out\r\n    public static previousCountLeft: number = 0;\r\n    public static previousCountRight: number = 0;\r\n\r\n    // this will hold the updated spacing value\r\n    public static currentHandSpacing: number = 0;\r\n\r\n    // this will hold the current card index in deck cards\r\n    public static currentDeckIndex: number = 0;\r\n\r\n    // this will hold the current card index in hand cards\r\n    public static currentHandIndex: number = 0;\r\n\r\n    // this will hold the current card index in discarded cards\r\n    public static currentDiscardIndex: number = 0;\r\n\r\n    // this save the x value once the mouse is pressed\r\n    public static originalX: number = 0;\r\n    // this save the y value once the mouse is pressed\r\n    public static originalY: number = 0;\r\n    // this hold a buffer value needed for card moving purposes\r\n    public static bufferX: number = 0;\r\n\r\n    onLoad(): void {\r\n\r\n        // get the parent node which is the TableLayout\r\n        this.parent = this.node.parent;\r\n\r\n        // get layout nodes\r\n        this.deckLayout = cc.find(\"DeckLayout\", this.parent.parent);\r\n        this.handLayout = cc.find(\"HandLayout\", this.parent.parent);\r\n        this.discardLayout = cc.find(\"DiscardLayout\", this.parent.parent);\r\n\r\n        // initialize mouse x and y value\r\n        var mouseOriX: number = 0;\r\n        var mouseOriY: number = 0;\r\n\r\n        // mouse event listener for mouse riht click is pressed down\r\n        this.node.on(cc.Node.EventType.MOUSE_DOWN, (event) => {\r\n            // cc.log(\"Drag started ...\");\r\n            this.node.opacity = 180;\r\n            this._down = true;\r\n\r\n            // store the original position of node\r\n            DragCard.originalX = this.node.x;\r\n            DragCard.originalY = this.node.y;\r\n\r\n            // store the original mouse X and Y when mouse is fist pressed\r\n            mouseOriX = event.getLocationX();\r\n            mouseOriY = event.getLocationY();\r\n\r\n            // makes the card selected appear to front\r\n            this.node.setLocalZOrder(this.node.getLocalZOrder() + 100);\r\n            this.parent.sortAllChildren();\r\n\r\n            // check if this card exist in deck cards\r\n            if (Deck.deckCards.lastIndexOf(this.node) >= 0) {\r\n                // set this card is in deck and set current card index\r\n                this._cardInDeck = true;\r\n                DragCard.currentDeckIndex = Deck.deckCards.lastIndexOf(this.node);\r\n                this.previousCardIn = \"Deck\";\r\n            }\r\n\r\n            // check if this card exist in hand cards\r\n            if (Hand.handCards.lastIndexOf(this.node) >= 0) {\r\n                // set this card is in hand and set current card index\r\n                this._cardInHand = true;\r\n                DragCard.currentHandIndex = Hand.handCards.lastIndexOf(this.node);\r\n                this.previousCardIn = \"Hand\";\r\n            }\r\n\r\n            // check if this card exist in discarded cards\r\n            if (Discarded.discardedCards.lastIndexOf(this.node) >= 0) {\r\n                // set this card is in discarded and set current card index\r\n                this._cardInDiscard = true;\r\n                DragCard.currentDiscardIndex = Discarded.discardedCards.lastIndexOf(this.node);\r\n                this.previousCardIn = \"Discarded\";\r\n            }\r\n            cc.log(this.previousCardIn);\r\n\r\n            if (!this.propagate) {\r\n                event.stopPropagation();\r\n            }\r\n        }, this);\r\n\r\n        // mouse event listener for mouse is moving\r\n        this.parent.on(cc.Node.EventType.MOUSE_MOVE, (event) => {\r\n\r\n            if (!this._down) {\r\n                event.stopPropagation();\r\n                return;\r\n            }\r\n            // set opacity of node\r\n            this.node.opacity = 180;\r\n            // this is to track the mouse movement position\r\n            var sumX: number = DragCard.originalX + event.getLocationX() - mouseOriX;\r\n            var sumY: number = DragCard.originalY + event.getLocationY() - mouseOriY;\r\n            this.node.x = sumX;\r\n            this.node.y = sumY;\r\n\r\n            // if card is moved to hand area\r\n            if (this._cardInHand === false && this.node.y < this.handLayout.y + this.handLayout.height / 2) {\r\n\r\n                this.setCurrentIndex();\r\n                this._cardInHand = true;\r\n                this._cardInDeck = false;\r\n                this._cardInDiscard = false;\r\n                // this insert current node into hand cards,\r\n                // which represents the hand area in table.\r\n                Hand.handCards.splice(DragCard.currentHandIndex, 0, this.node);\r\n                this.onSortHand();\r\n                this.node.setLocalZOrder(this.node.getLocalZOrder() + 100);\r\n                this.node.stopAllActions();\r\n                if (this.node.rotation !== 0) {\r\n                    this.node.runAction(cc.rotateTo(0.1, 0));\r\n                }\r\n\r\n                var remove: number = Deck.deckCards.lastIndexOf(this.node);\r\n\r\n                if (remove >= 0) {\r\n                    Deck.deckCards.splice(remove, 1);\r\n                    this.onSortTable();\r\n                }\r\n\r\n                remove = Discarded.discardedCards.lastIndexOf(this.node);\r\n\r\n                if (remove >= 0) {\r\n                    Discarded.discardedCards.splice(remove, 1);\r\n                    this.onSortTable();\r\n                }\r\n\r\n            }\r\n\r\n            if (this._cardInHand === true && this.node.y < (this.handLayout.y + this.handLayout.height / 2)) {\r\n\r\n                this.onMoveCard();\r\n\r\n            } else {\r\n\r\n                remove = Hand.handCards.lastIndexOf(this.node);\r\n\r\n                if (remove >= 0) {\r\n                    Hand.handCards.splice(remove, 1);\r\n                    this._cardInHand = false;\r\n                    this.previousCardIn = \"Hand\";\r\n                    this.onSortHand();\r\n                    DragCard.countLeft = 0;\r\n                    DragCard.countRight = 0;\r\n                    DragCard.bufferX = 0;\r\n                }\r\n\r\n                if (this._cardInDiscard === true) {\r\n                    var check: number = Discarded.discardedCards.indexOf(this.node);\r\n                    if (check < 0) {\r\n                        Discarded.discardedCards.push(this.node);\r\n                        // this.node.rotation = Math.floor(Math.random()*360);\r\n                        // this.node.runAction(cc.rotateTo(0.1,Math.floor(Math.random()*360)));\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (!this.propagate) {\r\n                event.stopPropagation();\r\n            }\r\n        }, this);\r\n\r\n        // mouse event listener for mouse right click is released\r\n        this.node.on(cc.Node.EventType.MOUSE_UP, (event) => {\r\n\r\n            if (!this._down) {\r\n                event.stopPropagation();\r\n                return;\r\n            }\r\n            // cc.log(\"Drag done ...\");\r\n            this.node.opacity = 255;\r\n            this._down = false;\r\n\r\n            // if the card is brought up to discard area\r\n            if (this.node.x > (this.discardLayout.x - this.discardLayout.width / 2)\r\n                && this.node.y > (this.discardLayout.y - this.discardLayout.height / 2)) {\r\n                this._cardInDeck = false;\r\n                this._cardInHand = false;\r\n                this.onDiscard();\r\n            } else {\r\n                // if this card brought to the hand area\r\n                if (this.node.y < this.handLayout.y + this.handLayout.height / 2) {\r\n                    // if card is not in hand, insert card\r\n                    if (this._cardInHand !== true) {\r\n                        this.insertHand();\r\n                    }\r\n                    // if card is in hand and no card movement in hand, sort.\r\n                    if (this._cardInHand === true && DragCard.countLeft === 0 && DragCard.countRight === 0) {\r\n                        this.onSortHand();\r\n                    }\r\n                } else { // if card is brought to neither discard area or hand area\r\n                    // animate card movement to their original position.\r\n                    if (this.previousCardIn === \"Hand\") {\r\n\r\n                        if (DragCard.previousCountLeft === 0 && DragCard.previousCountRight === 0) {\r\n                            Hand.handCards.splice(DragCard.currentHandIndex, 0, this.node);\r\n                        }\r\n                        if (DragCard.previousCountRight > 0) {\r\n                            Hand.handCards.splice(DragCard.currentHandIndex + DragCard.previousCountRight, 0, this.node);\r\n                        }\r\n                        if (DragCard.previousCountLeft > 0) {\r\n                            Hand.handCards.splice(DragCard.currentHandIndex - DragCard.previousCountLeft, 0, this.node);\r\n                        }\r\n                        this._cardInHand = true;\r\n                        this._cardInDeck = false;\r\n                        this._cardInDiscard = false;\r\n                    }\r\n\r\n                    if (this.previousCardIn === \"Deck\") {\r\n\r\n                        this.node.runAction(cc.moveTo(0.1, cc.p(this.deckLayout.x, this.deckLayout.y)));\r\n                        this._cardInHand = false;\r\n                        this._cardInDeck = true;\r\n                        this._cardInDiscard = false;\r\n                    }\r\n\r\n                    if (this.previousCardIn === \"Discarded\") {\r\n\r\n                        let xMoveTo: number = Math.floor(Math.random() * ((this.discardLayout.x + this.node.width / 3)\r\n                        - (this.discardLayout.x - this.node.width / 3) + 1)) + (this.discardLayout.x - this.node.width / 3);\r\n                    // set random y point in middle of discard area\r\n                    let yMoveTo: number = Math.floor(Math.random() * ((this.discardLayout.y + this.node.height / 3)\r\n                        - (this.discardLayout.y - this.node.height / 3) + 1)) + (this.discardLayout.y - this.node.height / 3);\r\n                    // run animation rotate and moveTo\r\n                    this.node.runAction(cc.spawn(cc.rotateTo(0.2, xMoveTo * yMoveTo % 360), cc.moveTo(0.2, xMoveTo, yMoveTo)));\r\n\r\n                    this._cardInHand = false;\r\n                    this._cardInDeck = false;\r\n                    this._cardInDiscard = true;\r\n                    }\r\n\r\n                    // on release, card localZOrder goes to original before the +100\r\n                    this.node.setLocalZOrder(this.node.getLocalZOrder() - 100);\r\n                    this.onSortHand();\r\n                }\r\n            }\r\n\r\n            // this node will copy the current node for swapping of the card\r\n            var temp: cc.Node = this.node;\r\n\r\n            // to find out if the position of the card has changed\r\n            for (var i: number = 1; i < Hand.handCards.length; i++) {\r\n\r\n                if (DragCard.countLeft === i && this._cardInHand === true) {\r\n\r\n                    // remove the current card from array and re-adding it on the new postion\r\n                    Hand.handCards.splice(DragCard.currentHandIndex, 1);\r\n                    Hand.handCards.splice(DragCard.currentHandIndex - DragCard.countLeft, 0, temp);\r\n                    this.onSortHand();\r\n                }\r\n\r\n                if (DragCard.countRight === i && this._cardInHand === true) {\r\n\r\n                    // remove the current card from array and re-adding it on the new postion\r\n                    Hand.handCards.splice(DragCard.currentHandIndex, 1);\r\n                    Hand.handCards.splice(DragCard.currentHandIndex + DragCard.countRight, 0, temp);\r\n                    this.onSortHand();\r\n                }\r\n            }\r\n            // reset counter and sort table\r\n            DragCard.countLeft = 0;\r\n            DragCard.countRight = 0;\r\n            DragCard.bufferX = 0;\r\n            this.onSortTable();\r\n\r\n            cc.log(\"Discarded \\n\", Discarded.discardedCards);\r\n            cc.log(\"Hand \\n\", Hand.handCards);\r\n            cc.log(\"Deck \\n\", Deck.deckCards);\r\n\r\n        }, this);\r\n\r\n    }\r\n\r\n    onDiscard(): void {\r\n\r\n        // check if this node exists in discardArray, returns value\r\n        var remove: number = Discarded.discardedCards.lastIndexOf(this.node);\r\n        // if duplicates is found in the discardArray, it returns positive value,\r\n        // this removes duplicates\r\n        if (remove >= 0) {\r\n            Discarded.discardedCards.splice(remove, 1);\r\n        }\r\n        // this insert current node into discard cards array,\r\n        Discarded.discardedCards.push(this.node);\r\n\r\n        // position this node on the discard area on layout before animation\r\n        //   let xValue: number = Math.floor(Math.random() * ((this.discardLayout.x + this.discardLayout.width / 2) -\r\n        //       (this.discardLayout.x - this.discardLayout.width) + 1)) + (this.discardLayout.x - this.discardLayout.width);\r\n\r\n        //   let yStartPoint: number = Math.floor(Math.random() * ((this.discardLayout.y + this.discardLayout.height / 2) -\r\n        //       (this.discardLayout.y - this.discardLayout.height) + 1)) + (this.discardLayout.y - this.discardLayout.height);\r\n\r\n        //   // randoms 0 or 1, to choose between X = 0, or Y = 0 for the purpose of starting node point before spawn animation.\r\n        //   let eitherXorY: number = Math.round(cc.random0To1());\r\n\r\n        //   // choose starting point for node\r\n        //   if (eitherXorY === 0) {\r\n        //       this.node.position = new cc.Vec2(xValue, (this.discardLayout.y - this.discardLayout.height));\r\n        //   } else {\r\n        //       this.node.position = new cc.Vec2((this.discardLayout.x - this.discardLayout.width), yStartPoint);\r\n        //   }\r\n\r\n        // set random x point in middle of discard area\r\n        let xMoveTo: number = Math.floor(Math.random() * ((this.discardLayout.x + this.node.width / 3)\r\n            - (this.discardLayout.x - this.node.width / 3) + 1)) + (this.discardLayout.x - this.node.width / 3);\r\n        // set random y point in middle of discard area\r\n        let yMoveTo: number = Math.floor(Math.random() * ((this.discardLayout.y + this.node.height / 3)\r\n            - (this.discardLayout.y - this.node.height / 3) + 1)) + (this.discardLayout.y - this.node.height / 3);\r\n        // run animation rotate and moveTo\r\n        this.node.runAction(cc.spawn(cc.rotateTo(0.2, xMoveTo * yMoveTo % 360), cc.moveTo(0.2, xMoveTo, yMoveTo)));\r\n\r\n        // if this card discarded from hand,\r\n        // remove this card from deck cards\r\n        remove = Deck.deckCards.lastIndexOf(this.node);\r\n        if (remove >= 0) {\r\n\r\n            Deck.deckCards.splice(remove, 1);\r\n        }\r\n\r\n        // if this card discarded from hand,\r\n        // remove this card from hand cards\r\n        remove = Hand.handCards.lastIndexOf(this.node);\r\n        if (remove >= 0) {\r\n\r\n            Hand.handCards.splice(remove, 1);\r\n        }\r\n\r\n        // assign localZOrder of every array member to its corresponding index\r\n        for (var i: number = 0; i < Discarded.discardedCards.length; i++) {\r\n            Discarded.discardedCards[i].setLocalZOrder(i);\r\n        }\r\n        // make TableLayout to sort its childrens\r\n        this.onSortHand();\r\n        this.onSortTable();\r\n    }\r\n\r\n    insertHand(): void {\r\n        // check if this node exists in hand cards, returns negative value if not found\r\n        var remove: number = Hand.handCards.lastIndexOf(this.node);\r\n\r\n        if (remove < 0) {\r\n            // this insert current node into hand cards,\r\n            // which represents the hand area in table.\r\n            Hand.handCards.push(this.node);\r\n        }\r\n\r\n        // if this item removed from discardArray,\r\n        // remove this item from discardArray and sort discardArray\r\n        remove = Discarded.discardedCards.lastIndexOf(this.node);\r\n        if (remove >= 0) {\r\n            Discarded.discardedCards.splice(remove, 1);\r\n        }\r\n\r\n        // call the hand sorting function\r\n        this.onSortHand();\r\n    }\r\n\r\n    onSortHand(): void {\r\n\r\n        // gets the absolute maximum point for the node to be in hand layout,\r\n        // negative means max point to the left, positive means max point to the right\r\n        var maxPoint: number = this.handLayout.width / 2;\r\n        var cardsInHand: number = Hand.handCards.length;\r\n\r\n        // firstIndex will hold X position for the first item in hand cards\r\n        var firstIndex: number = 0;\r\n        // spacing will hold the spacing value between all other item in hand cards\r\n        var spacing: number = 0;\r\n        // to get the first index x position\r\n        firstIndex = (maxPoint / cardsInHand) - maxPoint;\r\n        // to get spacing between cards\r\n        spacing = (maxPoint / cardsInHand) + (maxPoint / cardsInHand);\r\n\r\n        // this ensure cards goes side by side until there too much only then it will overlapped\r\n        if (spacing > this.node.width) {\r\n            spacing = this.node.width;\r\n            // likewise, the spacing have to be adjusted,\r\n            // this will indent the first card to the correct place,\r\n            // it moves half of this node width with every card added to array\r\n            // with exception to the first card\r\n            firstIndex = (this.node.width / 2 - (cardsInHand * this.node.width / 2));\r\n        }\r\n\r\n        DragCard.currentHandSpacing = spacing;\r\n\r\n        // this sort the hand with appropriate spacing given number of cards in hand\r\n        for (var i: number = 0; i < cardsInHand; i++) {\r\n            Hand.handCards[i].stopAllActions();\r\n            Hand.handCards[i].runAction(cc.spawn(cc.rotateTo(0.1, 0), cc.moveTo(0.1, cc.p(firstIndex + (spacing * i), this.handLayout.y))));\r\n            Hand.handCards[i].setLocalZOrder(i);\r\n        }\r\n        // sort all nodes\r\n        this.onSortTable();\r\n    }\r\n\r\n    onMoveCard(): void {\r\n\r\n        var i: number = 0;\r\n        // animation to move left or right\r\n        var moveRight: cc.ActionInterval = cc.moveBy(0.1, cc.p(DragCard.currentHandSpacing, 0));\r\n        var moveLeft: cc.ActionInterval = cc.moveBy(0.1, cc.p(-DragCard.currentHandSpacing, 0));\r\n\r\n        var adjustedOriginalX: number = DragCard.originalX + DragCard.bufferX;\r\n\r\n        for (i = 0; i <= Hand.handCards.length - 2; i++) {\r\n\r\n            // if card moved one spacing to the left, move the previous card to the right\r\n            if (this.node.x < adjustedOriginalX - (DragCard.currentHandSpacing * (i + 1))\r\n                && this.node.x > adjustedOriginalX - (DragCard.currentHandSpacing * (i + 2))) {\r\n\r\n                if (DragCard.countLeft === i) {\r\n\r\n                    // prevent conditional statement goes out of array bounds\r\n                    if (DragCard.currentHandIndex - (i + 1) >= 0) {\r\n                        Hand.handCards[DragCard.currentHandIndex - (i + 1)].runAction(moveRight.clone());\r\n                        // clone so that each animation is run independently\r\n                        DragCard.countLeft++;\r\n                    }\r\n                }\r\n            }\r\n            // if the card moved back to the right, move the next card to the left\r\n            if (DragCard.countLeft === (i + 1) && this.node.x > adjustedOriginalX - (DragCard.currentHandSpacing * i)) {\r\n\r\n                Hand.handCards[DragCard.currentHandIndex - (i + 1)].runAction(moveLeft.clone());\r\n                DragCard.countLeft--;\r\n\r\n            }\r\n        }\r\n\r\n        for (i = 0; i <= Hand.handCards.length - 2; i++) {\r\n\r\n            // if card moved one spacing to the right, move the next card to the left\r\n            if (this.node.x > adjustedOriginalX + (DragCard.currentHandSpacing * (i + 1))\r\n                && this.node.x < adjustedOriginalX + (DragCard.currentHandSpacing * (i + 2))) {\r\n\r\n                if (DragCard.countRight === i) {\r\n                    // prevent conditional statement goes out of array bounds\r\n                    if (DragCard.currentHandIndex + (i + 1) < Hand.handCards.length) {\r\n                        // if (Hand.handCards[.currentHandIndex + (i + 1)].runAction(moveLeft).isDone() !== true) {\r\n                        Hand.handCards[DragCard.currentHandIndex + (i + 1)].runAction(moveLeft.clone());\r\n                        DragCard.countRight++;\r\n                        // }DragCard\r\n                    }\r\n                }\r\n            }\r\n\r\n            // if the card moved back to the left, move the previous card to the right\r\n            if (DragCard.countRight === (i + 1) && this.node.x < adjustedOriginalX + (DragCard.currentHandSpacing * i)) {\r\n                // if (Hand.handCards[DragCard.currentHandIndex + (i + 1)].runAction(moveRight).isDone() !== true) {\r\n                Hand.handCards[DragCard.currentHandIndex + (i + 1)].runAction(moveRight.clone());\r\n                DragCard.countRight--;\r\n                // }\r\n            }\r\n        }\r\n        DragCard.previousCountLeft = DragCard.countLeft;\r\n        DragCard.previousCountRight = DragCard.countRight;\r\n\r\n        this.onSortTable();\r\n    }\r\n\r\n    setCurrentIndex(): void {\r\n\r\n\r\n        var maxPoint: number = this.handLayout.width / 2;\r\n        // this function is called before adding current card to Hand.handCards array, hence the + 1\r\n        var cardsInHand: number = Hand.handCards.length + 1;\r\n\r\n        var firstIndex: number = 0;\r\n        var spacing: number = 0;\r\n\r\n        firstIndex = (maxPoint / cardsInHand) - maxPoint;\r\n        spacing = (maxPoint / cardsInHand) + (maxPoint / cardsInHand);\r\n\r\n        if (spacing > this.node.width) {\r\n            spacing = this.node.width;\r\n\r\n            firstIndex = (this.node.width / 2 - (cardsInHand * this.node.width / 2));\r\n        }\r\n\r\n        DragCard.currentHandSpacing = spacing;\r\n\r\n        if (this.node.x < firstIndex) {\r\n            DragCard.currentHandIndex = 0;\r\n            DragCard.bufferX = firstIndex - DragCard.originalX;\r\n            if (spacing < this.node.width) {\r\n                DragCard.bufferX = firstIndex - DragCard.originalX;\r\n            }\r\n        }\r\n\r\n        for (var i: number = 0; i < Hand.handCards.length; i++) {\r\n            if (this.node.x > firstIndex + (DragCard.currentHandSpacing * (i))) {\r\n\r\n                DragCard.currentHandIndex = i + 1;\r\n                DragCard.bufferX = firstIndex - DragCard.originalX + (spacing * (i + 1));\r\n\r\n                if (spacing < this.node.width) {\r\n                    DragCard.bufferX = (firstIndex - DragCard.originalX) + (spacing * (i + 1));\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    onSortTable(): void {\r\n        // call TableLayout to reorder child with their localZorder value\r\n        this.parent.sortAllChildren();\r\n    }\r\n}\r\n"]}