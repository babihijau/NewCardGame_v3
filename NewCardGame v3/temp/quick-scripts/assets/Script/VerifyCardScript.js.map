{"version":3,"sources":["VerifyCardScript.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"..\\..\\..\\..\\assets\\Script","sourcesContent":["import Hand from \"./HandCardScript\";\r\nimport PrefabCard from \"./PrefabCardScript\";\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class VerifyCard extends cc.Component {\r\n\r\n    @property(cc.Node)\r\n    canvasNode: cc.Node = null;\r\n\r\n    public static handArrayNode: PrefabCard[][] = [];\r\n    public static handArrayName: string[] = [];\r\n\r\n    onHighlight(): void {\r\n\r\n        class MeldNode {\r\n            cards: string[];\r\n            deadwood: number;\r\n            parent: MeldNode | null;\r\n            constructor(cards: string[], parent: MeldNode | null) {\r\n                this.parent = parent;\r\n                this.cards = cards;\r\n                this.deadwood = Evaluator.count_deadwood(cards);\r\n                if (parent != null) {\r\n                    this.deadwood = parent.deadwood + this.deadwood;\r\n                }\r\n            }\r\n        }\r\n\r\n        class Evaluator {\r\n            static full_deck: string[] = [\r\n                \"AC\", \"2C\", \"3C\", \"4C\", \"5C\", \"6C\", \"7C\", \"8C\", \"9C\", \"10C\", \"JC\", \"QC\", \"KC\",\r\n                \"AD\", \"2D\", \"3D\", \"4D\", \"5D\", \"6D\", \"7D\", \"8D\", \"9D\", \"10D\", \"JD\", \"QD\", \"KD\",\r\n                \"AH\", \"2H\", \"3H\", \"4H\", \"5H\", \"6H\", \"7H\", \"8H\", \"9H\", \"10H\", \"JH\", \"QH\", \"KH\",\r\n                \"AS\", \"2S\", \"3S\", \"4S\", \"5S\", \"6S\", \"7S\", \"8S\", \"9S\", \"10S\", \"JS\", \"QS\", \"KS\"\r\n            ];\r\n\r\n            static suitval: { [key: string]: number } = {\r\n                \"C\": 0,\r\n                \"D\": 1,\r\n                \"H\": 2,\r\n                \"S\": 3\r\n            };\r\n\r\n            static card_suit_value(card: string): number {\r\n                let c: string = card.length === 2 ? card.substr(1, 1) : card.substr(2, 1);\r\n                return this.suitval[c];\r\n            }\r\n\r\n            static card_value(card: string): number {\r\n                let s: number = (this.full_deck.indexOf(card) % 13) + 1;\r\n                s = (s > 10) ? 10 : s;\r\n                return s;\r\n            }\r\n\r\n            static count_deadwood(cards: string[]): number {\r\n                let d: number = 0;\r\n                cards.forEach(element => {\r\n                    d += this.card_value(element);\r\n                });\r\n                return d;\r\n            }\r\n\r\n            static card_number_value(card: string): number {\r\n                let c: string = card.length === 2 ? card.substr(0, 1) : card.substr(0, 2);\r\n                c = (c === \"A\") ? \"1\" : c;\r\n                c = (c === \"J\") ? \"11\" : c;\r\n                c = (c === \"Q\") ? \"12\" : c;\r\n                c = (c === \"K\") ? \"13\" : c;\r\n                return Number(c);\r\n            }\r\n\r\n            static is_number_meld(cards: string[]): boolean {\r\n                if ((cards.length !== 3) && (cards.length !== 4)) {\r\n                    return false;\r\n                } else {\r\n                    let num: number = this.card_number_value(cards[0]);\r\n                    for (let i: number = 0; i < cards.length; i++) {\r\n                        if (this.card_number_value(cards[i]) !== num) {\r\n                            return false;\r\n                        }\r\n                    }\r\n                }\r\n                /*                 for (let i: number = 0; i < Hand.handCards.length; i++) {\r\n                                    if (Hand.handCards[i].name === cards[0]) {\r\n                                        var a: cc.Node = Hand.handCards[i];\r\n                                    }\r\n                                    if (Hand.handCards[i].name === cards[1]) {\r\n                                        var b: cc.Node = Hand.handCards[i];\r\n                                    }\r\n                                    if (Hand.handCards[i].name === cards[2]) {\r\n                                        var c: cc.Node = Hand.handCards[i];\r\n                                    }\r\n                                }\r\n                                if (Hand.handCards.indexOf(a) !== Hand.handCards.indexOf(b) - 1\r\n                                || Hand.handCards.indexOf(b) !== Hand.handCards.indexOf(c) - 1) {\r\n                                    return false;\r\n                                }\r\n                                 */\r\n                return true;\r\n            }\r\n\r\n            static is_suit_meld(cards: string[]): boolean {\r\n                if (cards.length < 3) {\r\n                    return false;\r\n                }\r\n                let suit: string = cards[0].length === 2 ? cards[0].substr(1, 1) : cards[0].substr(2, 1);\r\n                let current_value: number = this.card_number_value(cards[0]) + 1;\r\n                for (let i: number = 0; i < cards.length; i++) {\r\n                    let s: string = cards[i].length === 2 ? cards[i].substr(1, 1) : cards[i].substr(2, 1);\r\n                    if (suit !== s) {\r\n                        return false;\r\n                    }\r\n                }\r\n                for (let i: number = 1; i < cards.length; i++) {\r\n                    if (this.card_number_value(cards[i]) !== current_value) {\r\n                        return false;\r\n                    }\r\n                    current_value++;\r\n                }\r\n                /*                 for (let i: number = 0; i < Hand.handCards.length; i++) {\r\n                                    if (Hand.handCards[i].name === cards[0]) {\r\n                                        var a: cc.Node = Hand.handCards[i];\r\n                                    }\r\n                                    if (Hand.handCards[i].name === cards[1]) {\r\n                                        var b: cc.Node = Hand.handCards[i];\r\n                                    }\r\n                                    if (Hand.handCards[i].name === cards[2]) {\r\n                                        var c: cc.Node = Hand.handCards[i];\r\n                                    }\r\n                                }\r\n                                if (Hand.handCards.indexOf(a) !== Hand.handCards.indexOf(b) - 1\r\n                                || Hand.handCards.indexOf(b) !== Hand.handCards.indexOf(c) - 1) {\r\n                                    return false;\r\n                                } */\r\n                return true;\r\n            }\r\n\r\n            static valid_card(card: string): boolean {\r\n                let e: string = this.full_deck.find(item => item === card);\r\n                return e != null;\r\n            }\r\n\r\n            static sort_by_value(hand: string[]): string[] {\r\n                return hand.sort((a, b) => {\r\n                    let av: number = this.card_number_value(a);\r\n                    let bv: number = this.card_number_value(b);\r\n                    let c: number = -1;\r\n                    if (av < bv) {\r\n                        c = -1;\r\n                    } else if (av === bv) {\r\n                        c = 0;\r\n                    } else if (av > bv) {\r\n                        c = 1;\r\n                    }\r\n                    if (c === 0) {\r\n                        let as1: number = this.card_suit_value(a);\r\n                        let bs: number = this.card_suit_value(b);\r\n                        if (as1 < bs) {\r\n                            c = -1;\r\n                        } else if (as1 === bs) {\r\n                            c = 0;\r\n                        } else if (as1 > bs) {\r\n                            c = 1;\r\n                        }\r\n                    }\r\n                    return c;\r\n                });\r\n            }\r\n\r\n            static sort_by_suit(hand: string[]): string[] {\r\n                return hand.sort((a, b) => {\r\n                    let as1: number = this.card_suit_value(a);\r\n                    let bs: number = this.card_suit_value(b);\r\n                    let c: number = -1;\r\n                    if (as1 < bs) {\r\n                        c = -1;\r\n                    } else if (as1 === bs) {\r\n                        c = 0;\r\n                    } else if (as1 > bs) {\r\n                        c = 1;\r\n                    }\r\n                    if (c === 0) {\r\n                        let av: number = this.card_number_value(a);\r\n                        let bv: number = this.card_number_value(b);\r\n                        let c: number = -1;\r\n                        if (av < bv) {\r\n                            c = -1;\r\n                        } else if (av === bv) {\r\n                            c = 0;\r\n                        } else if (av > bv) {\r\n                            c = 1;\r\n                        }\r\n                    }\r\n                    return c;\r\n                });\r\n            }\r\n\r\n            // returns a new array of melds, containing all melds from the initial group,\r\n            // except for ones that contain cards from the given meld.\r\n            static clean_meld_group(melds: string[][], meld: string[]): string[][] {\r\n                let to_return: string[][] = [];\r\n                melds.forEach(m => {\r\n                    to_return.push(m);\r\n                });\r\n                for (let i: number = 0; i < meld.length; i++) {\r\n                    let c: string = meld[i];\r\n                    to_return = to_return.filter((m) => {\r\n                        return (m.indexOf(c) === -1);\r\n                    });\r\n                }\r\n\r\n                return to_return;\r\n            }\r\n\r\n\r\n            /* Returns the leaf node for which parent pointers can be followed to obtain the\r\n            # best possible meld combinations.\r\n            # This could be a O(n!) algorithm, where n is the number of melds. But in\r\n            # normal use, it shouldn't ever approach something too infeasible, because any\r\n            # large set of melds should include an enourmous amount of overlapping melds,\r\n            # which will be eliminated from recursive calls. The max recursion depth will\r\n            # be equal to the largest number of non-overlapping melds.*/\r\n            static build_meld_tree(melds: string[][], root_meld: MeldNode | null): MeldNode {\r\n                let best: MeldNode = root_meld;\r\n                melds.forEach(m => {\r\n                    let n: MeldNode = new MeldNode(m, root_meld);\r\n                    let new_tree: MeldNode = this.build_meld_tree(this.clean_meld_group(melds, m), n);\r\n                    if (best == null || (new_tree.deadwood > best.deadwood)) {\r\n                        best = new_tree;\r\n                    }\r\n                });\r\n                return best as MeldNode;\r\n            }\r\n\r\n            // follows a path up to the root, and gets an array of melds\r\n            static get_meld_set(leaf_node: MeldNode): string[][] {\r\n                let arr: string[][] = [];\r\n                let n: MeldNode | null = leaf_node;\r\n                while (n != null) {\r\n                    arr.push(n.cards);\r\n                    n = n.parent;\r\n                }\r\n                return arr;\r\n            }\r\n\r\n            // returns an array containing the best score and best melds\r\n            static get_best_combination(melds: string[][]): { score: number, melds: string[][] } {\r\n                let best_score: number = 0;\r\n                let best_melds: string[][] = [];\r\n                let best_leaf: MeldNode = this.build_meld_tree(melds, null);\r\n                best_score = best_leaf.deadwood;\r\n                best_melds = this.get_meld_set(best_leaf);\r\n                return { score: best_score, melds: best_melds };\r\n            }\r\n\r\n            static verify(hand: string[]): { score: number, melds: string[][], hand: string[]; } {\r\n                // first, check for 4 card melds of the same-numbered card\r\n                let all_melds: string[][] = [];\r\n                hand = Evaluator.sort_by_value(hand);\r\n                for (let i: number = 0; i < hand.length - 3; i++) {\r\n                    let poss_meld: string[] = hand.slice(i, i + 4);\r\n                    if (this.is_number_meld(poss_meld)) {\r\n                        all_melds.push(poss_meld);\r\n                        // when a 4-card meld is found, also add all the possible 3-card melds which\r\n                        // won't be picked up by the subsequent 3-card scan.\r\n                        all_melds.push([poss_meld[0], poss_meld[1], poss_meld[3]]);\r\n                        all_melds.push([poss_meld[0], poss_meld[2], poss_meld[3]]);\r\n                    }\r\n                }\r\n                // next, check for 3 card melds of the same-numbered card\r\n                for (let i: number = 0; i < hand.length - 2; i++) {\r\n                    let poss_meld: string[] = hand.slice(i, i + 3);\r\n                    if (this.is_number_meld(poss_meld)) {\r\n                        all_melds.push(poss_meld);\r\n                    }\r\n                }\r\n                // next, check for 3 card melds in the same suit\r\n                hand = this.sort_by_suit(hand);\r\n                for (let i: number = 0; i < hand.length - 2; i++) {\r\n                    let poss_meld: string[] = hand.slice(i, i + 3);\r\n                    if (this.is_suit_meld(poss_meld)) {\r\n                        all_melds.push(poss_meld);\r\n                    }\r\n                }\r\n                // next, 4 card melds\r\n                for (let i: number = 0; i < hand.length - 3; i++) {\r\n                    let poss_meld: string[] = hand.slice(i, i + 4);\r\n                    if (this.is_suit_meld(poss_meld)) {\r\n                        all_melds.push(poss_meld);\r\n                    }\r\n                }\r\n                // finally, 5 card melds\r\n                for (let i: number = 0; i < hand.length - 4; i++) {\r\n                    let poss_meld: string[] = hand.slice(i, i + 5);\r\n                    if (this.is_suit_meld(poss_meld)) {\r\n                        all_melds.push(poss_meld);\r\n                    }\r\n                }\r\n\r\n                // all possible melds have been found. Now, find the optimal set of melds.\r\n                all_melds = all_melds.sort((a, b) => {\r\n                    let av: number = this.count_deadwood(a);\r\n                    let bv: number = this.count_deadwood(b);\r\n                    let c: number = -1;\r\n                    if (av < bv) {\r\n                        c = -1;\r\n                    } else if (av === bv) {\r\n                        c = 0;\r\n                    } else if (av > bv) {\r\n                        c = 1;\r\n                    }\r\n                    return c;\r\n                });\r\n\r\n                if (all_melds.length === 0) {\r\n                    return { score: this.count_deadwood(hand), melds: [], hand: hand };\r\n                } else {\r\n                    let a: { score: number; melds: string[][]; } = this.get_best_combination(all_melds);\r\n                    let deadwood: number = this.count_deadwood(hand) - a.score;\r\n                    let best_melds: string[][] = a.melds;\r\n                    best_melds.forEach(m => {\r\n                        hand = hand.filter(item => {\r\n                            return m.find(i => i === item) == null;\r\n                        });\r\n                    });\r\n                    return { score: deadwood, melds: best_melds, hand: hand };\r\n                }\r\n            }\r\n\r\n            static clean(hand2: string[], min: number, max: number, poss_meld: string[]): string[] {\r\n\r\n               /* let j: number = 0;\r\n                if (min < 3) {\r\n                    for (j = 0; j < min; j++) {\r\n                        hand2.shift();\r\n                    }\r\n                }\r\n                                if (hand2.length - max < 2) {\r\n                                    for (j = 0; j < hand2.length - 1 - max; j++) {\r\n                                        hand2.pop();\r\n                                    }\r\n                                } */\r\n\r\n                for (let i: number = 0; i < poss_meld.length; i++) {\r\n                    let c: string = poss_meld[i];\r\n                    hand2 = hand2.filter((m) => {\r\n                        return (m.indexOf(c) === -1);\r\n                    });\r\n                }\r\n                return hand2;\r\n            }\r\n\r\n            static highlight(hand: string[]): string[][] {\r\n                let hand2: string[] = hand.slice();\r\n                let highlight: string[][] = [];\r\n                let min: number = 0;\r\n                let max: number = 0;\r\n\r\n                // 13 card sequence melds\r\n                for (let i: number = 0; i < hand2.length - 12; i++) {\r\n                    let poss_meld: string[] = hand2.slice(i, i + 13);\r\n                    if (this.is_suit_meld(poss_meld)) {\r\n                        min = i;\r\n                        max = i + 13;\r\n                        highlight.push(poss_meld);\r\n                        hand2 = Evaluator.clean(hand2, min, max, poss_meld);\r\n                        i--;\r\n                    }\r\n                }\r\n                // 12 card sequence melds\r\n                for (let i: number = 0; i < hand2.length - 11; i++) {\r\n                    let poss_meld: string[] = hand2.slice(i, i + 12);\r\n                    if (this.is_suit_meld(poss_meld)) {\r\n                        min = i;\r\n                        max = i + 12;\r\n                        highlight.push(poss_meld);\r\n                        hand2 = Evaluator.clean(hand2, min, max, poss_meld);\r\n                        i--;\r\n                    }\r\n                }\r\n                // 11 card sequence melds\r\n                for (let i: number = 0; i < hand2.length - 10; i++) {\r\n                    let poss_meld: string[] = hand2.slice(i, i + 11);\r\n                    if (this.is_suit_meld(poss_meld)) {\r\n                        min = i;\r\n                        max = i + 11;\r\n                        highlight.push(poss_meld);\r\n                        hand2 = Evaluator.clean(hand2, min, max, poss_meld);\r\n                        i--;\r\n                    }\r\n                }\r\n                // 10 card sequence melds\r\n                for (let i: number = 0; i < hand2.length - 9; i++) {\r\n                    let poss_meld: string[] = hand2.slice(i, i + 10);\r\n                    if (this.is_suit_meld(poss_meld)) {\r\n                        min = i;\r\n                        max = i + 10;\r\n                        highlight.push(poss_meld);\r\n                        hand2 = Evaluator.clean(hand2, min, max, poss_meld);\r\n                        i--;\r\n                    }\r\n                }\r\n                // 9 card sequence melds\r\n                for (let i: number = 0; i < hand2.length - 8; i++) {\r\n                    let poss_meld: string[] = hand2.slice(i, i + 9);\r\n                    if (this.is_suit_meld(poss_meld)) {\r\n                        min = i;\r\n                        max = i + 9;\r\n                        highlight.push(poss_meld);\r\n                        hand2 = Evaluator.clean(hand2, min, max, poss_meld);\r\n                        i--;\r\n                    }\r\n                }\r\n                // 8 card sequence melds\r\n                for (let i: number = 0; i < hand2.length - 7; i++) {\r\n                    let poss_meld: string[] = hand2.slice(i, i + 8);\r\n                    if (this.is_suit_meld(poss_meld)) {\r\n                        min = i;\r\n                        max = i + 8;\r\n                        highlight.push(poss_meld);\r\n                        hand2 = Evaluator.clean(hand2, min, max, poss_meld);\r\n                        i--;\r\n                    }\r\n                }\r\n                // 7 card sequence melds\r\n                for (let i: number = 0; i < hand2.length - 6; i++) {\r\n                    let poss_meld: string[] = hand2.slice(i, i + 7);\r\n                    if (this.is_suit_meld(poss_meld)) {\r\n                        min = i;\r\n                        max = i + 7;\r\n                        highlight.push(poss_meld);\r\n                        hand2 = Evaluator.clean(hand2, min, max, poss_meld);\r\n                        i--;\r\n                    }\r\n                }\r\n                // 6 card sequence melds\r\n                for (let i: number = 0; i < hand2.length - 5; i++) {\r\n                    let poss_meld: string[] = hand2.slice(i, i + 6);\r\n                    if (this.is_suit_meld(poss_meld)) {\r\n                        min = i;\r\n                        max = i + 6;\r\n                        highlight.push(poss_meld);\r\n                        hand2 = Evaluator.clean(hand2, min, max, poss_meld);\r\n                        i--;\r\n                    }\r\n                }\r\n                // 5 card sequence melds\r\n                for (let i: number = 0; i < hand2.length - 4; i++) {\r\n                    let poss_meld: string[] = hand2.slice(i, i + 5);\r\n                    if (this.is_suit_meld(poss_meld)) {\r\n                        min = i;\r\n                        max = i + 5;\r\n                        highlight.push(poss_meld);\r\n                        hand2 = Evaluator.clean(hand2, min, max, poss_meld);\r\n                        i--;\r\n                    }\r\n                }\r\n                // 4 same number meld\r\n                for (let i: number = 0; i < hand2.length - 3; i++) {\r\n                    let poss_meld: string[] = hand2.slice(i, i + 4);\r\n                    if (this.is_number_meld(poss_meld)) {\r\n                        min = i;\r\n                        max = i + 4;\r\n                        highlight.push(poss_meld);\r\n                        hand2 = Evaluator.clean(hand2, min, max, poss_meld);\r\n                        i--;\r\n                    }\r\n                }\r\n                // 4 card sequence meld\r\n                for (let i: number = 0; i < hand2.length - 3; i++) {\r\n                    let poss_meld: string[] = hand2.slice(i, i + 4);\r\n                    if (this.is_suit_meld(poss_meld)) {\r\n                        min = i;\r\n                        max = i + 4;\r\n                        highlight.push(poss_meld);\r\n                        hand2 = Evaluator.clean(hand2, min, max, poss_meld);\r\n                        i--;\r\n                    }\r\n                }\r\n                // 3 same number meld\r\n                for (let i: number = 0; i < hand2.length - 2; i++) {\r\n                    let poss_meld: string[] = hand2.slice(i, i + 3);\r\n                    if (this.is_number_meld(poss_meld)) {\r\n                        min = i;\r\n                        max = i + 3;\r\n                        highlight.push(poss_meld);\r\n                        hand2 = Evaluator.clean(hand2, min, max, poss_meld);\r\n                        i--;\r\n                    }\r\n                }\r\n                // 3 card sequence meld\r\n                for (let i: number = 0; i < hand2.length - 2; i++) {\r\n                    let poss_meld: string[] = hand2.slice(i, i + 3);\r\n                    if (this.is_suit_meld(poss_meld)) {\r\n                        min = i;\r\n                        max = i + 3;\r\n                        highlight.push(poss_meld);\r\n                        hand.splice(i, 3);\r\n                        hand2 = Evaluator.clean(hand2, min, max, poss_meld);\r\n                        i--;\r\n                    }\r\n                }\r\n                cc.log(\"Not meld: \", hand2);\r\n                return highlight;\r\n            }\r\n        }\r\n        VerifyCard.handArrayNode = [];\r\n\r\n        VerifyCard.handArrayName = [];\r\n        for (let i: number = 0; i < Hand.handCards.length; i++) {\r\n\r\n            VerifyCard.handArrayName[i] = Hand.handCards[i].name;\r\n        }\r\n\r\n        let handIn2DStringArray: string[][];\r\n        handIn2DStringArray = (Evaluator.highlight(VerifyCard.handArrayName));\r\n\r\n        let map: { [key: string]: cc.Node } = {};\r\n\r\n        VerifyCard.handArrayNode = this.stringToNode(handIn2DStringArray);\r\n        // verifyCard.handArrayNode = this.cleanHighlight(VerifyCard.handArrayNode);\r\n        // doesnt work because cleaning after concactenated will remove possible additional melds\r\n    }\r\n\r\n    /*     cleanHighlight(handArrayNode: cc.Node[][]): cc.Node[][] {\r\n\r\n                handArrayNode.forEach((item,index) => {\r\n                    // cc.log(\"bugima\",Hand.handCards.indexOf(item[0]));\r\n                    // cc.log(\"bugima2\",Hand.handCards.indexOf(item[1]));\r\n                    if (Hand.handCards.indexOf(item[0]) !== Hand.handCards.indexOf(item[1])-1) {\r\n                        // cc.log(\"false\",index);\r\n                        handArrayNode.splice(index,1);\r\n                    }\r\n                });\r\n\r\n                return handArrayNode;\r\n            } */\r\n\r\n    stringToNode(handIn2DStringArray: string[][]): PrefabCard[][] {\r\n\r\n        var handBackTo2DNodeArray: PrefabCard[][] = [];\r\n        var nodeArray:PrefabCard[] = [];\r\n\r\n        handIn2DStringArray.forEach((item, index) => {\r\n            nodeArray = [];\r\n            item.forEach((item2) => {\r\n                Hand.handCards.forEach((f) => {\r\n                    if (item2 === f.name) {\r\n                        nodeArray.push(f.getComponent(PrefabCard));\r\n                    }\r\n                });\r\n                handBackTo2DNodeArray[index] = nodeArray;\r\n            });\r\n        });\r\n\r\n        return handBackTo2DNodeArray;\r\n    }\r\n}\r\n"]}